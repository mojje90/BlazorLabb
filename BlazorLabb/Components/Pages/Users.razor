@page "/Users"
@using BlazorLabb.PersonInfo
@rendermode InteractiveServer

@if (isLoading)
{
    <p>Loading...</p>
}
else
{

    <table class="table">
        <thead>
            <tr>
                <th>ID</th>
                <th>Name</th>
                <th>Email</th>
                <th>Street</th>
                <th>City</th>
                <th>ZipCode</th>
                <th>Company</th>
                <th>CatchPhrase</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var p in displayedUsers.Take(limit))
            {

                <tr>
                    <td>@p.Id</td>
                    <td>@p.Name</td>
                    <td>@p.Email</td>
                    <td>@p.Adress.Street</td>
                    <td>@p.Adress.City</td>
                    <td>@p.Adress.ZipCode</td>
                    <td>@p.Company.Name</td>
                    <td>@p.Company.CatchPhrase</td>
                </tr>
            }

        </tbody>
    </table>
    <button @onclick="@ShowTen">Show more/less</button>
    <button @onclick="@ChangeDataSource">Change data source</button>
    <button @onclick="@SortByName">Sort by name</button>
    <button @onclick="@SortById">Sort by Id</button>
    <input type="text" @bind="@searchValue" />
    <button @onclick="@SearchUser">Search user</button>
    <button @onclick="@ResetSearch">Reset Search</button>
}

@code {
    public bool isLoading = true;
    List<Person> allUsers = new List<Person>();
    private int limit = 5;
    IFetchData memoryData = new FetchInMemoryData();
    IFetchData apiData = new FetchApiData();
    bool dataSourceToggle = true;
    bool sortByNameToggle = true;
    bool sortByIdToggle = true;
    string? searchValue = null;
    List<Person> displayedUsers = new List<Person>();

    protected override async Task OnInitializedAsync()
    {
        await Task.Delay(1500);
        isLoading = false;
        var fetchedPersons = await memoryData.GetUsers();
        displayedUsers = fetchedPersons.OrderBy(x => x.Name).ToList();
        allUsers = displayedUsers;
    }

    public void ShowTen()
    {
        if (limit == 10)
        {
            limit = 5;
        }
        else if (limit == 5)
        {
            limit = 10;
        }
    }
    public async Task ChangeDataSource()
    {
        if (dataSourceToggle)
        {
            allUsers = await apiData.GetUsers();
            displayedUsers = allUsers;
        }
        else
        {
            allUsers = await memoryData.GetUsers();
            displayedUsers = allUsers;
        }
        dataSourceToggle = !dataSourceToggle;
    }
    public void SortByName()
    {
        if (sortByNameToggle)
        {
            displayedUsers = allUsers.OrderBy(x => x.Name).ToList();
            sortByNameToggle = !sortByNameToggle;
        }
        else
        {
            displayedUsers = allUsers.OrderByDescending(x => x.Name).ToList();
            sortByNameToggle = !sortByNameToggle;
        }
    }
    public void SortById()
    {
        if (sortByIdToggle)
        {
            displayedUsers = allUsers.OrderBy(x => x.Id).ToList();
            sortByIdToggle = !sortByIdToggle;
        }
        else
        {
            displayedUsers = allUsers.OrderByDescending(x => x.Id).ToList();
            sortByIdToggle = !sortByIdToggle;
        }
    }
    public void SearchUser()
    {
        displayedUsers = allUsers.Where(x => x.Name.Contains(searchValue, StringComparison.OrdinalIgnoreCase)).ToList();
    }
    public void ResetSearch()
    {
        searchValue = string.Empty;
        displayedUsers = allUsers;
    }
}
